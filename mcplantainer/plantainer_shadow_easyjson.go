// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mcplantainer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	mclightmodule "mevericcore/mcmodules/mclightmodule"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5bd79fa1DecodeMevericcoreMcplantainer(in *jlexer.Lexer, out *ShadowUpdateRPCMsgSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "args":
			easyjson5bd79fa1DecodeMevericcoreMcplantainer1(in, &out.Args)
		case "src":
			out.Src = string(in.String())
		case "dst":
			out.Dst = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "id":
			out.Id = int(in.Int())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Error = make(map[string]interface{})
					} else {
						*out.Error = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v1 interface{}
						if m, ok := v1.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v1.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v1 = in.Interface()
						}
						(*out.Error)[key] = v1
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Result = make(map[string]interface{})
					} else {
						*out.Result = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v2 interface{}
						if m, ok := v2.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v2.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v2 = in.Interface()
						}
						(*out.Result)[key] = v2
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer(out *jwriter.Writer, in ShadowUpdateRPCMsgSt) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"args\":")
		easyjson5bd79fa1EncodeMevericcoreMcplantainer1(out, in.Args)
	}
	if in.Src != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"src\":")
		out.String(string(in.Src))
	}
	if in.Dst != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dst\":")
		out.String(string(in.Dst))
	}
	if in.Method != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"method\":")
		out.String(string(in.Method))
	}
	if in.Id != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int(int(in.Id))
	}
	if in.Error != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error\":")
		if in.Error == nil {
			out.RawString("null")
		} else {
			if *in.Error == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v3First := true
				for v3Name, v3Value := range *in.Error {
					if !v3First {
						out.RawByte(',')
					}
					v3First = false
					out.String(string(v3Name))
					out.RawByte(':')
					if m, ok := v3Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v3Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v3Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			if *in.Result == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v4First := true
				for v4Name, v4Value := range *in.Result {
					if !v4First {
						out.RawByte(',')
					}
					v4First = false
					out.String(string(v4Name))
					out.RawByte(':')
					if m, ok := v4Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v4Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v4Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShadowUpdateRPCMsgSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5bd79fa1EncodeMevericcoreMcplantainer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShadowUpdateRPCMsgSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5bd79fa1EncodeMevericcoreMcplantainer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShadowUpdateRPCMsgSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5bd79fa1DecodeMevericcoreMcplantainer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShadowUpdateRPCMsgSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5bd79fa1DecodeMevericcoreMcplantainer(l, v)
}
func easyjson5bd79fa1DecodeMevericcoreMcplantainer1(in *jlexer.Lexer, out *PlantainerShadowRPCMsgArgsSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			easyjson5bd79fa1DecodeMevericcoreMcplantainer2(in, &out.State)
		case "version":
			out.Version = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer1(out *jwriter.Writer, in PlantainerShadowRPCMsgArgsSt) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"state\":")
		easyjson5bd79fa1EncodeMevericcoreMcplantainer2(out, in.State)
	}
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Int(int(in.Version))
	}
	out.RawByte('}')
}
func easyjson5bd79fa1DecodeMevericcoreMcplantainer2(in *jlexer.Lexer, out *PlantainerShadowRPCMsgArgsStateSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reported":
			if in.IsNull() {
				in.Skip()
				out.Reported = nil
			} else {
				if out.Reported == nil {
					out.Reported = new(PlantainerShadowStatePieceSt)
				}
				(*out.Reported).UnmarshalEasyJSON(in)
			}
		case "desired":
			if in.IsNull() {
				in.Skip()
				out.Desired = nil
			} else {
				if out.Desired == nil {
					out.Desired = new(PlantainerShadowStatePieceSt)
				}
				(*out.Desired).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer2(out *jwriter.Writer, in PlantainerShadowRPCMsgArgsStateSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Reported != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reported\":")
		if in.Reported == nil {
			out.RawString("null")
		} else {
			(*in.Reported).MarshalEasyJSON(out)
		}
	}
	if in.Desired != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"desired\":")
		if in.Desired == nil {
			out.RawString("null")
		} else {
			(*in.Desired).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}
func easyjson5bd79fa1DecodeMevericcoreMcplantainer3(in *jlexer.Lexer, out *PlantainerShadowStateSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reported":
			(out.Reported).UnmarshalEasyJSON(in)
		case "desired":
			if in.IsNull() {
				in.Skip()
				out.Desired = nil
			} else {
				if out.Desired == nil {
					out.Desired = new(PlantainerShadowStatePieceSt)
				}
				(*out.Desired).UnmarshalEasyJSON(in)
			}
		case "delta":
			if in.IsNull() {
				in.Skip()
				out.Delta = nil
			} else {
				if out.Delta == nil {
					out.Delta = new(PlantainerShadowStatePieceSt)
				}
				(*out.Delta).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer3(out *jwriter.Writer, in PlantainerShadowStateSt) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reported\":")
		(in.Reported).MarshalEasyJSON(out)
	}
	if in.Desired != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"desired\":")
		if in.Desired == nil {
			out.RawString("null")
		} else {
			(*in.Desired).MarshalEasyJSON(out)
		}
	}
	if in.Delta != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"delta\":")
		if in.Delta == nil {
			out.RawString("null")
		} else {
			(*in.Delta).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlantainerShadowStateSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5bd79fa1EncodeMevericcoreMcplantainer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlantainerShadowStateSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5bd79fa1EncodeMevericcoreMcplantainer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlantainerShadowStateSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5bd79fa1DecodeMevericcoreMcplantainer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlantainerShadowStateSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5bd79fa1DecodeMevericcoreMcplantainer3(l, v)
}
func easyjson5bd79fa1DecodeMevericcoreMcplantainer4(in *jlexer.Lexer, out *PlantainerShadowStatePieceSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "light_module":
			easyjson5bd79fa1DecodeMevericcoreMcplantainer5(in, &out.LightModule)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer4(out *jwriter.Writer, in PlantainerShadowStatePieceSt) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"light_module\":")
		easyjson5bd79fa1EncodeMevericcoreMcplantainer5(out, in.LightModule)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlantainerShadowStatePieceSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5bd79fa1EncodeMevericcoreMcplantainer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlantainerShadowStatePieceSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5bd79fa1EncodeMevericcoreMcplantainer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlantainerShadowStatePieceSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5bd79fa1DecodeMevericcoreMcplantainer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlantainerShadowStatePieceSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5bd79fa1DecodeMevericcoreMcplantainer4(l, v)
}
func easyjson5bd79fa1DecodeMevericcoreMcplantainer5(in *jlexer.Lexer, out *PlantainerLightModuleStateSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(string)
				}
				*out.Mode = string(in.String())
			}
		case "light_lvl_check_active":
			if in.IsNull() {
				in.Skip()
				out.LightLvlCheckActive = nil
			} else {
				if out.LightLvlCheckActive == nil {
					out.LightLvlCheckActive = new(bool)
				}
				*out.LightLvlCheckActive = bool(in.Bool())
			}
		case "light_lvl_check_interval":
			if in.IsNull() {
				in.Skip()
				out.LightLvlCheckInterval = nil
			} else {
				if out.LightLvlCheckInterval == nil {
					out.LightLvlCheckInterval = new(int)
				}
				*out.LightLvlCheckInterval = int(in.Int())
			}
		case "light_lvl_check_last_interval_call_timestamp":
			if in.IsNull() {
				in.Skip()
				out.LightLvlCheckLastIntervalCallTimestamp = nil
			} else {
				if out.LightLvlCheckLastIntervalCallTimestamp == nil {
					out.LightLvlCheckLastIntervalCallTimestamp = new(int)
				}
				*out.LightLvlCheckLastIntervalCallTimestamp = int(in.Int())
			}
		case "light_intervals_arr":
			if in.IsNull() {
				in.Skip()
				out.LightIntervalsArr = nil
			} else {
				if out.LightIntervalsArr == nil {
					out.LightIntervalsArr = new([]mclightmodule.LightModuleInterval)
				}
				if in.IsNull() {
					in.Skip()
					*out.LightIntervalsArr = nil
				} else {
					in.Delim('[')
					if *out.LightIntervalsArr == nil {
						if !in.IsDelim(']') {
							*out.LightIntervalsArr = make([]mclightmodule.LightModuleInterval, 0, 1)
						} else {
							*out.LightIntervalsArr = []mclightmodule.LightModuleInterval{}
						}
					} else {
						*out.LightIntervalsArr = (*out.LightIntervalsArr)[:0]
					}
					for !in.IsDelim(']') {
						var v5 mclightmodule.LightModuleInterval
						easyjson5bd79fa1DecodeMevericcoreMcmodulesMclightmodule(in, &v5)
						*out.LightIntervalsArr = append(*out.LightIntervalsArr, v5)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "light_intervals_rest_time_turned_on":
			if in.IsNull() {
				in.Skip()
				out.LightIntervalsRestTimeTurnedOn = nil
			} else {
				if out.LightIntervalsRestTimeTurnedOn == nil {
					out.LightIntervalsRestTimeTurnedOn = new(bool)
				}
				*out.LightIntervalsRestTimeTurnedOn = bool(in.Bool())
			}
		case "light_intervals_checking_interval":
			if in.IsNull() {
				in.Skip()
				out.LightIntervalsCheckingInterval = nil
			} else {
				if out.LightIntervalsCheckingInterval == nil {
					out.LightIntervalsCheckingInterval = new(int)
				}
				*out.LightIntervalsCheckingInterval = int(in.Int())
			}
		case "lightTurnedOn":
			if in.IsNull() {
				in.Skip()
				out.LightTurnedOn = nil
			} else {
				if out.LightTurnedOn == nil {
					out.LightTurnedOn = new(bool)
				}
				*out.LightTurnedOn = bool(in.Bool())
			}
		case "lightLvl":
			if in.IsNull() {
				in.Skip()
				out.LightLvl = nil
			} else {
				if out.LightLvl == nil {
					out.LightLvl = new(float64)
				}
				*out.LightLvl = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer5(out *jwriter.Writer, in PlantainerLightModuleStateSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Mode != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mode\":")
		if in.Mode == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Mode))
		}
	}
	if in.LightLvlCheckActive != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"light_lvl_check_active\":")
		if in.LightLvlCheckActive == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.LightLvlCheckActive))
		}
	}
	if in.LightLvlCheckInterval != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"light_lvl_check_interval\":")
		if in.LightLvlCheckInterval == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.LightLvlCheckInterval))
		}
	}
	if in.LightLvlCheckLastIntervalCallTimestamp != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"light_lvl_check_last_interval_call_timestamp\":")
		if in.LightLvlCheckLastIntervalCallTimestamp == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.LightLvlCheckLastIntervalCallTimestamp))
		}
	}
	if in.LightIntervalsArr != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"light_intervals_arr\":")
		if in.LightIntervalsArr == nil {
			out.RawString("null")
		} else {
			if *in.LightIntervalsArr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v6, v7 := range *in.LightIntervalsArr {
					if v6 > 0 {
						out.RawByte(',')
					}
					easyjson5bd79fa1EncodeMevericcoreMcmodulesMclightmodule(out, v7)
				}
				out.RawByte(']')
			}
		}
	}
	if in.LightIntervalsRestTimeTurnedOn != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"light_intervals_rest_time_turned_on\":")
		if in.LightIntervalsRestTimeTurnedOn == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.LightIntervalsRestTimeTurnedOn))
		}
	}
	if in.LightIntervalsCheckingInterval != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"light_intervals_checking_interval\":")
		if in.LightIntervalsCheckingInterval == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.LightIntervalsCheckingInterval))
		}
	}
	if in.LightTurnedOn != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lightTurnedOn\":")
		if in.LightTurnedOn == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.LightTurnedOn))
		}
	}
	if in.LightLvl != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lightLvl\":")
		if in.LightLvl == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.LightLvl))
		}
	}
	out.RawByte('}')
}
func easyjson5bd79fa1DecodeMevericcoreMcmodulesMclightmodule(in *jlexer.Lexer, out *mclightmodule.LightModuleInterval) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from_time_hours":
			out.FromTimeHours = int(in.Int())
		case "from_time_minutes":
			out.FromTimeMinutes = int(in.Int())
		case "to_time_hours":
			out.ToTimeHours = int(in.Int())
		case "to_time_minutes":
			out.ToTimeMinutes = int(in.Int())
		case "turned_on":
			out.TurnedOn = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcmodulesMclightmodule(out *jwriter.Writer, in mclightmodule.LightModuleInterval) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FromTimeHours != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"from_time_hours\":")
		out.Int(int(in.FromTimeHours))
	}
	if in.FromTimeMinutes != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"from_time_minutes\":")
		out.Int(int(in.FromTimeMinutes))
	}
	if in.ToTimeHours != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"to_time_hours\":")
		out.Int(int(in.ToTimeHours))
	}
	if in.ToTimeMinutes != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"to_time_minutes\":")
		out.Int(int(in.ToTimeMinutes))
	}
	if in.TurnedOn {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"turned_on\":")
		out.Bool(bool(in.TurnedOn))
	}
	out.RawByte('}')
}
func easyjson5bd79fa1DecodeMevericcoreMcplantainer6(in *jlexer.Lexer, out *PlantainerShadowSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "state":
			(out.State).UnmarshalEasyJSON(in)
		case "metadata":
			easyjson5bd79fa1DecodeMevericcoreMcplantainer7(in, &out.Metadata)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer6(out *jwriter.Writer, in PlantainerShadowSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.Id))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"state\":")
		(in.State).MarshalEasyJSON(out)
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metadata\":")
		easyjson5bd79fa1EncodeMevericcoreMcplantainer7(out, in.Metadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlantainerShadowSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5bd79fa1EncodeMevericcoreMcplantainer6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlantainerShadowSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5bd79fa1EncodeMevericcoreMcplantainer6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlantainerShadowSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5bd79fa1DecodeMevericcoreMcplantainer6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlantainerShadowSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5bd79fa1DecodeMevericcoreMcplantainer6(l, v)
}
func easyjson5bd79fa1DecodeMevericcoreMcplantainer7(in *jlexer.Lexer, out *PlantainerShadowMetadataSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bd79fa1EncodeMevericcoreMcplantainer7(out *jwriter.Writer, in PlantainerShadowMetadataSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Int(int(in.Version))
	}
	out.RawByte('}')
}
