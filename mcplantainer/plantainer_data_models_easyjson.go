// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mcplantainer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAd86b0a0DecodeMevericcoreMcplantainer(in *jlexer.Lexer, out *PlantainerDataSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "values":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Values = make(map[string]map[string]PlantainerDataValuesSt)
				} else {
					out.Values = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 map[string]PlantainerDataValuesSt
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v1 = make(map[string]PlantainerDataValuesSt)
						} else {
							v1 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v2 PlantainerDataValuesSt
							easyjsonAd86b0a0DecodeMevericcoreMcplantainer1(in, &v2)
							(v1)[key] = v2
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Values)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TS).UnmarshalJSON(data))
			}
		case "period":
			out.PeriodInSec = int(in.Int())
		case "deviceShadowId":
			out.DeviceShadowId = string(in.String())
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd86b0a0EncodeMevericcoreMcplantainer(out *jwriter.Writer, in PlantainerDataSt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Values) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"values\":")
		if in.Values == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Values {
				if !v3First {
					out.RawByte(',')
				}
				v3First = false
				out.String(string(v3Name))
				out.RawByte(':')
				if v3Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v4First := true
					for v4Name, v4Value := range v3Value {
						if !v4First {
							out.RawByte(',')
						}
						v4First = false
						out.String(string(v4Name))
						out.RawByte(':')
						easyjsonAd86b0a0EncodeMevericcoreMcplantainer1(out, v4Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ts\":")
		out.Raw((in.TS).MarshalJSON())
	}
	if in.PeriodInSec != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"period\":")
		out.Int(int(in.PeriodInSec))
	}
	if in.DeviceShadowId != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deviceShadowId\":")
		out.String(string(in.DeviceShadowId))
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"updatedAt\":")
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.DeletedAt != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deletedAt\":")
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlantainerDataSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd86b0a0EncodeMevericcoreMcplantainer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlantainerDataSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd86b0a0EncodeMevericcoreMcplantainer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlantainerDataSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd86b0a0DecodeMevericcoreMcplantainer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlantainerDataSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd86b0a0DecodeMevericcoreMcplantainer(l, v)
}
func easyjsonAd86b0a0DecodeMevericcoreMcplantainer1(in *jlexer.Lexer, out *PlantainerDataValuesSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "irrigationModule":
			if in.IsNull() {
				in.Skip()
				out.IrrigationModule = nil
			} else {
				if out.IrrigationModule == nil {
					out.IrrigationModule = new(PlantainerDataValuesIrrigationModuleSt)
				}
				easyjsonAd86b0a0DecodeMevericcoreMcplantainer2(in, &*out.IrrigationModule)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd86b0a0EncodeMevericcoreMcplantainer1(out *jwriter.Writer, in PlantainerDataValuesSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IrrigationModule != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"irrigationModule\":")
		if in.IrrigationModule == nil {
			out.RawString("null")
		} else {
			easyjsonAd86b0a0EncodeMevericcoreMcplantainer2(out, *in.IrrigationModule)
		}
	}
	out.RawByte('}')
}
func easyjsonAd86b0a0DecodeMevericcoreMcplantainer2(in *jlexer.Lexer, out *PlantainerDataValuesIrrigationModuleSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "humidity":
			out.Humidity = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd86b0a0EncodeMevericcoreMcplantainer2(out *jwriter.Writer, in PlantainerDataValuesIrrigationModuleSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Humidity != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"humidity\":")
		out.Int(int(in.Humidity))
	}
	out.RawByte('}')
}
