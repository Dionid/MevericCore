// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mcdashboard_old

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEa461afbDecodeMevericcoreMcdashboard(in *jlexer.Lexer, out *WsTokenActionResSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "requestId":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "action":
			out.Method = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa461afbEncodeMevericcoreMcdashboard(out *jwriter.Writer, in WsTokenActionResSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.Id != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"requestId\":")
		if in.Id == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Id))
		}
	}
	if in.Method != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"action\":")
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsTokenActionResSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa461afbEncodeMevericcoreMcdashboard(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTokenActionResSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa461afbEncodeMevericcoreMcdashboard(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsTokenActionResSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa461afbDecodeMevericcoreMcdashboard(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTokenActionResSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa461afbDecodeMevericcoreMcdashboard(l, v)
}
func easyjsonEa461afbDecodeMevericcoreMcdashboard1(in *jlexer.Lexer, out *WsTokenActionReqSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "requestId":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "action":
			out.Method = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa461afbEncodeMevericcoreMcdashboard1(out *jwriter.Writer, in WsTokenActionReqSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Login != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"login\":")
		out.String(string(in.Login))
	}
	if in.Password != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"password\":")
		out.String(string(in.Password))
	}
	if in.Id != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"requestId\":")
		if in.Id == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Id))
		}
	}
	if in.Method != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"action\":")
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsTokenActionReqSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa461afbEncodeMevericcoreMcdashboard1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTokenActionReqSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa461afbEncodeMevericcoreMcdashboard1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsTokenActionReqSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa461afbDecodeMevericcoreMcdashboard1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTokenActionReqSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa461afbDecodeMevericcoreMcdashboard1(l, v)
}
func easyjsonEa461afbDecodeMevericcoreMcdashboard2(in *jlexer.Lexer, out *WsAuthenticateActionResSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "requestId":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "action":
			out.Method = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa461afbEncodeMevericcoreMcdashboard2(out *jwriter.Writer, in WsAuthenticateActionResSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.Id != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"requestId\":")
		if in.Id == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Id))
		}
	}
	if in.Method != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"action\":")
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsAuthenticateActionResSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa461afbEncodeMevericcoreMcdashboard2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsAuthenticateActionResSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa461afbEncodeMevericcoreMcdashboard2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsAuthenticateActionResSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa461afbDecodeMevericcoreMcdashboard2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsAuthenticateActionResSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa461afbDecodeMevericcoreMcdashboard2(l, v)
}
func easyjsonEa461afbDecodeMevericcoreMcdashboard3(in *jlexer.Lexer, out *WsAuthenticateActionReqSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "requestId":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "action":
			out.Method = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa461afbEncodeMevericcoreMcdashboard3(out *jwriter.Writer, in WsAuthenticateActionReqSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Token != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"token\":")
		out.String(string(in.Token))
	}
	if in.Id != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"requestId\":")
		if in.Id == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Id))
		}
	}
	if in.Method != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"action\":")
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsAuthenticateActionReqSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa461afbEncodeMevericcoreMcdashboard3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsAuthenticateActionReqSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa461afbEncodeMevericcoreMcdashboard3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsAuthenticateActionReqSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa461afbDecodeMevericcoreMcdashboard3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsAuthenticateActionReqSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa461afbDecodeMevericcoreMcdashboard3(l, v)
}
