// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mccommon

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	bson "gopkg.in/mgo.v2/bson"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson38438769DecodeMevericcoreMccommon(in *jlexer.Lexer, out *DevicesWithCustomDataListBaseModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DevicesWithCustomDataListBaseModel, 0, 1)
			} else {
				*out = DevicesWithCustomDataListBaseModel{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 DeviceWithCustomDataBaseModel
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson38438769EncodeMevericcoreMccommon(out *jwriter.Writer, in DevicesWithCustomDataListBaseModel) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DevicesWithCustomDataListBaseModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson38438769EncodeMevericcoreMccommon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DevicesWithCustomDataListBaseModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson38438769EncodeMevericcoreMccommon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DevicesWithCustomDataListBaseModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson38438769DecodeMevericcoreMccommon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DevicesWithCustomDataListBaseModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson38438769DecodeMevericcoreMccommon(l, v)
}
func easyjson38438769DecodeMevericcoreMccommon1(in *jlexer.Lexer, out *DevicesListBaseModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DevicesListBaseModel, 0, 1)
			} else {
				*out = DevicesListBaseModel{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 DeviceWithShadowBaseModel
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson38438769EncodeMevericcoreMccommon1(out *jwriter.Writer, in DevicesListBaseModel) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DevicesListBaseModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson38438769EncodeMevericcoreMccommon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DevicesListBaseModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson38438769EncodeMevericcoreMccommon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DevicesListBaseModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson38438769DecodeMevericcoreMccommon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DevicesListBaseModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson38438769DecodeMevericcoreMccommon1(l, v)
}
func easyjson38438769DecodeMevericcoreMccommon2(in *jlexer.Lexer, out *DeviceWithCustomDataBaseModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CustomData = make(map[string]interface{})
				} else {
					out.CustomData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 interface{}
					if m, ok := v7.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v7.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v7 = in.Interface()
					}
					(out.CustomData)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "customAdminData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CustomAdminData = make(map[string]interface{})
				} else {
					out.CustomAdminData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 interface{}
					if m, ok := v8.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v8.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v8 = in.Interface()
					}
					(out.CustomAdminData)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "shadow":
			(out.Shadow).UnmarshalEasyJSON(in)
		case "srcId":
			out.Src = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "firstActivation":
			if in.IsNull() {
				in.Skip()
				out.FirstActivation = nil
			} else {
				if out.FirstActivation == nil {
					out.FirstActivation = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FirstActivation).UnmarshalJSON(data))
				}
			}
		case "lastSeenOnline":
			if in.IsNull() {
				in.Skip()
				out.LastSeenOnline = nil
			} else {
				if out.LastSeenOnline == nil {
					out.LastSeenOnline = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastSeenOnline).UnmarshalJSON(data))
				}
			}
		case "isOnline":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "ownersIds":
			if in.IsNull() {
				in.Skip()
				out.OwnersIds = nil
			} else {
				in.Delim('[')
				if out.OwnersIds == nil {
					if !in.IsDelim(']') {
						out.OwnersIds = make([]bson.ObjectId, 0, 4)
					} else {
						out.OwnersIds = []bson.ObjectId{}
					}
				} else {
					out.OwnersIds = (out.OwnersIds)[:0]
				}
				for !in.IsDelim(']') {
					var v9 bson.ObjectId
					if data := in.Raw(); in.Ok() {
						in.AddError((v9).UnmarshalJSON(data))
					}
					out.OwnersIds = append(out.OwnersIds, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson38438769EncodeMevericcoreMccommon2(out *jwriter.Writer, in DeviceWithCustomDataBaseModel) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.CustomData) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customData\":")
		if in.CustomData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.CustomData {
				if !v10First {
					out.RawByte(',')
				}
				v10First = false
				out.String(string(v10Name))
				out.RawByte(':')
				if m, ok := v10Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v10Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v10Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.CustomAdminData) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customAdminData\":")
		if in.CustomAdminData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.CustomAdminData {
				if !v11First {
					out.RawByte(',')
				}
				v11First = false
				out.String(string(v11Name))
				out.RawByte(':')
				if m, ok := v11Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v11Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v11Value))
				}
			}
			out.RawByte('}')
		}
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shadow\":")
		(in.Shadow).MarshalEasyJSON(out)
	}
	if in.Src != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"srcId\":")
		out.String(string(in.Src))
	}
	if in.Type != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.String(string(in.Type))
	}
	if in.FirstActivation != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"firstActivation\":")
		if in.FirstActivation == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FirstActivation).MarshalJSON())
		}
	}
	if in.LastSeenOnline != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lastSeenOnline\":")
		if in.LastSeenOnline == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LastSeenOnline).MarshalJSON())
		}
	}
	if in.IsOnline != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isOnline\":")
		if in.IsOnline == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsOnline))
		}
	}
	if len(in.OwnersIds) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ownersIds\":")
		if in.OwnersIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.OwnersIds {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Raw((v13).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"updatedAt\":")
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.DeletedAt != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deletedAt\":")
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeviceWithCustomDataBaseModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson38438769EncodeMevericcoreMccommon2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceWithCustomDataBaseModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson38438769EncodeMevericcoreMccommon2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeviceWithCustomDataBaseModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson38438769DecodeMevericcoreMccommon2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceWithCustomDataBaseModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson38438769DecodeMevericcoreMccommon2(l, v)
}
func easyjson38438769DecodeMevericcoreMccommon3(in *jlexer.Lexer, out *DeviceWithShadowBaseModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shadow":
			(out.Shadow).UnmarshalEasyJSON(in)
		case "srcId":
			out.Src = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "firstActivation":
			if in.IsNull() {
				in.Skip()
				out.FirstActivation = nil
			} else {
				if out.FirstActivation == nil {
					out.FirstActivation = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FirstActivation).UnmarshalJSON(data))
				}
			}
		case "lastSeenOnline":
			if in.IsNull() {
				in.Skip()
				out.LastSeenOnline = nil
			} else {
				if out.LastSeenOnline == nil {
					out.LastSeenOnline = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastSeenOnline).UnmarshalJSON(data))
				}
			}
		case "isOnline":
			if in.IsNull() {
				in.Skip()
				out.IsOnline = nil
			} else {
				if out.IsOnline == nil {
					out.IsOnline = new(bool)
				}
				*out.IsOnline = bool(in.Bool())
			}
		case "ownersIds":
			if in.IsNull() {
				in.Skip()
				out.OwnersIds = nil
			} else {
				in.Delim('[')
				if out.OwnersIds == nil {
					if !in.IsDelim(']') {
						out.OwnersIds = make([]bson.ObjectId, 0, 4)
					} else {
						out.OwnersIds = []bson.ObjectId{}
					}
				} else {
					out.OwnersIds = (out.OwnersIds)[:0]
				}
				for !in.IsDelim(']') {
					var v14 bson.ObjectId
					if data := in.Raw(); in.Ok() {
						in.AddError((v14).UnmarshalJSON(data))
					}
					out.OwnersIds = append(out.OwnersIds, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson38438769EncodeMevericcoreMccommon3(out *jwriter.Writer, in DeviceWithShadowBaseModel) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shadow\":")
		(in.Shadow).MarshalEasyJSON(out)
	}
	if in.Src != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"srcId\":")
		out.String(string(in.Src))
	}
	if in.Type != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.String(string(in.Type))
	}
	if in.FirstActivation != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"firstActivation\":")
		if in.FirstActivation == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FirstActivation).MarshalJSON())
		}
	}
	if in.LastSeenOnline != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lastSeenOnline\":")
		if in.LastSeenOnline == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LastSeenOnline).MarshalJSON())
		}
	}
	if in.IsOnline != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isOnline\":")
		if in.IsOnline == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsOnline))
		}
	}
	if len(in.OwnersIds) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ownersIds\":")
		if in.OwnersIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.OwnersIds {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Raw((v16).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"updatedAt\":")
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.DeletedAt != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deletedAt\":")
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeviceWithShadowBaseModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson38438769EncodeMevericcoreMccommon3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceWithShadowBaseModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson38438769EncodeMevericcoreMccommon3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeviceWithShadowBaseModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson38438769DecodeMevericcoreMccommon3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceWithShadowBaseModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson38438769DecodeMevericcoreMccommon3(l, v)
}
