// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mccommon

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson138b69acDecodeMevericcoreMccommon(in *jlexer.Lexer, out *RPCWithShadowUpdateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "args":
			(out.Args).UnmarshalEasyJSON(in)
		case "src":
			out.Src = string(in.String())
		case "dst":
			out.Dst = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "id":
			out.Id = int(in.Int())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Error = make(map[string]interface{})
					} else {
						*out.Error = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v1 interface{}
						if m, ok := v1.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v1.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v1 = in.Interface()
						}
						(*out.Error)[key] = v1
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Result = make(map[string]interface{})
					} else {
						*out.Result = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v2 interface{}
						if m, ok := v2.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v2.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v2 = in.Interface()
						}
						(*out.Result)[key] = v2
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson138b69acEncodeMevericcoreMccommon(out *jwriter.Writer, in RPCWithShadowUpdateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"args\":")
		(in.Args).MarshalEasyJSON(out)
	}
	if in.Src != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"src\":")
		out.String(string(in.Src))
	}
	if in.Dst != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dst\":")
		out.String(string(in.Dst))
	}
	if in.Method != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"method\":")
		out.String(string(in.Method))
	}
	if in.Id != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int(int(in.Id))
	}
	if in.Error != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error\":")
		if in.Error == nil {
			out.RawString("null")
		} else {
			if *in.Error == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v3First := true
				for v3Name, v3Value := range *in.Error {
					if !v3First {
						out.RawByte(',')
					}
					v3First = false
					out.String(string(v3Name))
					out.RawByte(':')
					if m, ok := v3Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v3Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v3Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			if *in.Result == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v4First := true
				for v4Name, v4Value := range *in.Result {
					if !v4First {
						out.RawByte(',')
					}
					v4First = false
					out.String(string(v4Name))
					out.RawByte(':')
					if m, ok := v4Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v4Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v4Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RPCWithShadowUpdateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson138b69acEncodeMevericcoreMccommon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RPCWithShadowUpdateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson138b69acEncodeMevericcoreMccommon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RPCWithShadowUpdateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson138b69acDecodeMevericcoreMccommon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RPCWithShadowUpdateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson138b69acDecodeMevericcoreMccommon(l, v)
}
func easyjson138b69acDecodeMevericcoreMccommon1(in *jlexer.Lexer, out *RPCMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "src":
			out.Src = string(in.String())
		case "dst":
			out.Dst = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "id":
			out.Id = int(in.Int())
		case "args":
			if m, ok := out.Args.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Args.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Args = in.Interface()
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Error = make(map[string]interface{})
					} else {
						*out.Error = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v5 interface{}
						if m, ok := v5.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v5.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v5 = in.Interface()
						}
						(*out.Error)[key] = v5
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Result = make(map[string]interface{})
					} else {
						*out.Result = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v6 interface{}
						if m, ok := v6.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v6.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v6 = in.Interface()
						}
						(*out.Result)[key] = v6
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson138b69acEncodeMevericcoreMccommon1(out *jwriter.Writer, in RPCMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Src != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"src\":")
		out.String(string(in.Src))
	}
	if in.Dst != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dst\":")
		out.String(string(in.Dst))
	}
	if in.Method != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"method\":")
		out.String(string(in.Method))
	}
	if in.Id != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int(int(in.Id))
	}
	if in.Args != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"args\":")
		if m, ok := in.Args.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Args.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Args))
		}
	}
	if in.Error != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error\":")
		if in.Error == nil {
			out.RawString("null")
		} else {
			if *in.Error == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v7First := true
				for v7Name, v7Value := range *in.Error {
					if !v7First {
						out.RawByte(',')
					}
					v7First = false
					out.String(string(v7Name))
					out.RawByte(':')
					if m, ok := v7Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v7Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v7Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			if *in.Result == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v8First := true
				for v8Name, v8Value := range *in.Result {
					if !v8First {
						out.RawByte(',')
					}
					v8First = false
					out.String(string(v8Name))
					out.RawByte(':')
					if m, ok := v8Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v8Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v8Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RPCMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson138b69acEncodeMevericcoreMccommon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RPCMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson138b69acEncodeMevericcoreMccommon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RPCMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson138b69acDecodeMevericcoreMccommon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RPCMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson138b69acDecodeMevericcoreMccommon1(l, v)
}
