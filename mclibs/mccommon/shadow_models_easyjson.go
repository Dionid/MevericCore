// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mccommon

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB7ed31d3DecodeMevericcoreMccommon(in *jlexer.Lexer, out *ShadowUpdateMsgStateSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reported":
			if in.IsNull() {
				in.Skip()
				out.Reported = nil
			} else {
				if out.Reported == nil {
					out.Reported = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Reported = make(map[string]interface{})
					} else {
						*out.Reported = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v1 interface{}
						if m, ok := v1.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v1.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v1 = in.Interface()
						}
						(*out.Reported)[key] = v1
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "desired":
			if in.IsNull() {
				in.Skip()
				out.Desired = nil
			} else {
				if out.Desired == nil {
					out.Desired = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Desired = make(map[string]interface{})
					} else {
						*out.Desired = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v2 interface{}
						if m, ok := v2.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v2.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v2 = in.Interface()
						}
						(*out.Desired)[key] = v2
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon(out *jwriter.Writer, in ShadowUpdateMsgStateSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Reported != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reported\":")
		if in.Reported == nil {
			out.RawString("null")
		} else {
			if *in.Reported == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v3First := true
				for v3Name, v3Value := range *in.Reported {
					if !v3First {
						out.RawByte(',')
					}
					v3First = false
					out.String(string(v3Name))
					out.RawByte(':')
					if m, ok := v3Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v3Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v3Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Desired != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"desired\":")
		if in.Desired == nil {
			out.RawString("null")
		} else {
			if *in.Desired == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v4First := true
				for v4Name, v4Value := range *in.Desired {
					if !v4First {
						out.RawByte(',')
					}
					v4First = false
					out.String(string(v4Name))
					out.RawByte(':')
					if m, ok := v4Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v4Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v4Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShadowUpdateMsgStateSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShadowUpdateMsgStateSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShadowUpdateMsgStateSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShadowUpdateMsgStateSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon(l, v)
}
func easyjsonB7ed31d3DecodeMevericcoreMccommon1(in *jlexer.Lexer, out *ShadowUpdateMsgSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			(out.State).UnmarshalEasyJSON(in)
		case "version":
			out.Version = int(in.Int())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "clientId":
			out.ClientId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon1(out *jwriter.Writer, in ShadowUpdateMsgSt) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"state\":")
		(in.State).MarshalEasyJSON(out)
	}
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Int(int(in.Version))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timestamp\":")
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if in.ClientId != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"clientId\":")
		out.String(string(in.ClientId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShadowUpdateMsgSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShadowUpdateMsgSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShadowUpdateMsgSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShadowUpdateMsgSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon1(l, v)
}
func easyjsonB7ed31d3DecodeMevericcoreMccommon2(in *jlexer.Lexer, out *ShadowStateSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reported":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Reported = make(map[string]interface{})
				} else {
					out.Reported = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.Reported)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "desired":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Desired = make(map[string]interface{})
				} else {
					out.Desired = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					(out.Desired)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "delta":
			if in.IsNull() {
				in.Skip()
				out.Delta = nil
			} else {
				if out.Delta == nil {
					out.Delta = new(ShadowStateDeltaSt)
				}
				(*out.Delta).UnmarshalEasyJSON(in)
			}
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon2(out *jwriter.Writer, in ShadowStateSt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Reported) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reported\":")
		if in.Reported == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Reported {
				if !v7First {
					out.RawByte(',')
				}
				v7First = false
				out.String(string(v7Name))
				out.RawByte(':')
				if m, ok := v7Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v7Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Desired) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"desired\":")
		if in.Desired == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Desired {
				if !v8First {
					out.RawByte(',')
				}
				v8First = false
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Delta != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"delta\":")
		if in.Delta == nil {
			out.RawString("null")
		} else {
			(*in.Delta).MarshalEasyJSON(out)
		}
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metadata\":")
		(in.Metadata).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShadowStateSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShadowStateSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShadowStateSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShadowStateSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon2(l, v)
}
func easyjsonB7ed31d3DecodeMevericcoreMccommon3(in *jlexer.Lexer, out *ShadowStateMetadataSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reported":
			if in.IsNull() {
				in.Skip()
				out.Reported = nil
			} else {
				if out.Reported == nil {
					out.Reported = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Reported = make(map[string]interface{})
					} else {
						*out.Reported = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v9 interface{}
						if m, ok := v9.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v9.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v9 = in.Interface()
						}
						(*out.Reported)[key] = v9
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "desired":
			if in.IsNull() {
				in.Skip()
				out.Desired = nil
			} else {
				if out.Desired == nil {
					out.Desired = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Desired = make(map[string]interface{})
					} else {
						*out.Desired = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v10 interface{}
						if m, ok := v10.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v10.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v10 = in.Interface()
						}
						(*out.Desired)[key] = v10
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "delta":
			if in.IsNull() {
				in.Skip()
				out.Delta = nil
			} else {
				if out.Delta == nil {
					out.Delta = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Delta = make(map[string]interface{})
					} else {
						*out.Delta = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v11 interface{}
						if m, ok := v11.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v11.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v11 = in.Interface()
						}
						(*out.Delta)[key] = v11
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "version":
			out.Version = int(in.Int())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon3(out *jwriter.Writer, in ShadowStateMetadataSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Reported != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reported\":")
		if in.Reported == nil {
			out.RawString("null")
		} else {
			if *in.Reported == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v12First := true
				for v12Name, v12Value := range *in.Reported {
					if !v12First {
						out.RawByte(',')
					}
					v12First = false
					out.String(string(v12Name))
					out.RawByte(':')
					if m, ok := v12Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v12Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v12Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Desired != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"desired\":")
		if in.Desired == nil {
			out.RawString("null")
		} else {
			if *in.Desired == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v13First := true
				for v13Name, v13Value := range *in.Desired {
					if !v13First {
						out.RawByte(',')
					}
					v13First = false
					out.String(string(v13Name))
					out.RawByte(':')
					if m, ok := v13Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v13Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v13Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Delta != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"delta\":")
		if in.Delta == nil {
			out.RawString("null")
		} else {
			if *in.Delta == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v14First := true
				for v14Name, v14Value := range *in.Delta {
					if !v14First {
						out.RawByte(',')
					}
					v14First = false
					out.String(string(v14Name))
					out.RawByte(':')
					if m, ok := v14Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v14Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v14Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Int(int(in.Version))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timestamp\":")
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShadowStateMetadataSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShadowStateMetadataSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShadowStateMetadataSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShadowStateMetadataSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon3(l, v)
}
func easyjsonB7ed31d3DecodeMevericcoreMccommon4(in *jlexer.Lexer, out *ShadowStateDeltaSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int(in.Int())
		case "state":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.State = make(map[string]interface{})
				} else {
					out.State = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 interface{}
					if m, ok := v15.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v15.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v15 = in.Interface()
					}
					(out.State)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon4(out *jwriter.Writer, in ShadowStateDeltaSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Int(int(in.Version))
	}
	if len(in.State) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"state\":")
		if in.State == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.State {
				if !v16First {
					out.RawByte(',')
				}
				v16First = false
				out.String(string(v16Name))
				out.RawByte(':')
				if m, ok := v16Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v16Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v16Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShadowStateDeltaSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShadowStateDeltaSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShadowStateDeltaSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShadowStateDeltaSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon4(l, v)
}
func easyjsonB7ed31d3DecodeMevericcoreMccommon5(in *jlexer.Lexer, out *ShadowModelSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "state":
			(out.State).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon5(out *jwriter.Writer, in ShadowModelSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.Id))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"state\":")
		(in.State).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShadowModelSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShadowModelSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShadowModelSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShadowModelSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon5(l, v)
}
func easyjsonB7ed31d3DecodeMevericcoreMccommon6(in *jlexer.Lexer, out *DeviceShadowUpdateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			(out.State).UnmarshalEasyJSON(in)
		case "version":
			out.Version = int(in.Int())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon6(out *jwriter.Writer, in DeviceShadowUpdateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"state\":")
		(in.State).MarshalEasyJSON(out)
	}
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Int(int(in.Version))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timestamp\":")
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeviceShadowUpdateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceShadowUpdateMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeviceShadowUpdateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceShadowUpdateMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon6(l, v)
}
func easyjsonB7ed31d3DecodeMevericcoreMccommon7(in *jlexer.Lexer, out *DeviceShadowMsgState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reported":
			if in.IsNull() {
				in.Skip()
				out.Reported = nil
			} else {
				if out.Reported == nil {
					out.Reported = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Reported = make(map[string]interface{})
					} else {
						*out.Reported = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v17 interface{}
						if m, ok := v17.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v17.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v17 = in.Interface()
						}
						(*out.Reported)[key] = v17
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "desired":
			if in.IsNull() {
				in.Skip()
				out.Desired = nil
			} else {
				if out.Desired == nil {
					out.Desired = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Desired = make(map[string]interface{})
					} else {
						*out.Desired = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v18 interface{}
						if m, ok := v18.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v18.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v18 = in.Interface()
						}
						(*out.Desired)[key] = v18
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7ed31d3EncodeMevericcoreMccommon7(out *jwriter.Writer, in DeviceShadowMsgState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Reported != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reported\":")
		if in.Reported == nil {
			out.RawString("null")
		} else {
			if *in.Reported == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v19First := true
				for v19Name, v19Value := range *in.Reported {
					if !v19First {
						out.RawByte(',')
					}
					v19First = false
					out.String(string(v19Name))
					out.RawByte(':')
					if m, ok := v19Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v19Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v19Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	if in.Desired != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"desired\":")
		if in.Desired == nil {
			out.RawString("null")
		} else {
			if *in.Desired == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v20First := true
				for v20Name, v20Value := range *in.Desired {
					if !v20First {
						out.RawByte(',')
					}
					v20First = false
					out.String(string(v20Name))
					out.RawByte(':')
					if m, ok := v20Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v20Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v20Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeviceShadowMsgState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7ed31d3EncodeMevericcoreMccommon7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceShadowMsgState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7ed31d3EncodeMevericcoreMccommon7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeviceShadowMsgState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7ed31d3DecodeMevericcoreMccommon7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceShadowMsgState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7ed31d3DecodeMevericcoreMccommon7(l, v)
}
