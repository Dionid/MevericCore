// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mccommunication

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8b1d86ffDecodeMevericcoreMccommunication(in *jlexer.Lexer, out *ClientToServerRPCReqSt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rpcMsg":
			if in.IsNull() {
				in.Skip()
				out.RPCMsg = nil
			} else {
				if out.RPCMsg == nil {
					out.RPCMsg = new(RPCMsg)
				}
				(*out.RPCMsg).UnmarshalEasyJSON(in)
			}
		case "clientId":
			out.ClientId = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "resource":
			if in.IsNull() {
				in.Skip()
				out.Resource = nil
			} else {
				if out.Resource == nil {
					out.Resource = new(string)
				}
				*out.Resource = string(in.String())
			}
		case "msg":
			if in.IsNull() {
				in.Skip()
				out.Msg = nil
			} else {
				if out.Msg == nil {
					out.Msg = new([]uint8)
				}
				if in.IsNull() {
					in.Skip()
					*out.Msg = nil
				} else {
					*out.Msg = in.Bytes()
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8b1d86ffEncodeMevericcoreMccommunication(out *jwriter.Writer, in ClientToServerRPCReqSt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RPCMsg != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"rpcMsg\":")
		if in.RPCMsg == nil {
			out.RawString("null")
		} else {
			(*in.RPCMsg).MarshalEasyJSON(out)
		}
	}
	if in.ClientId != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"clientId\":")
		out.String(string(in.ClientId))
	}
	if in.Protocol != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"protocol\":")
		out.String(string(in.Protocol))
	}
	if in.Resource != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resource\":")
		if in.Resource == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Resource))
		}
	}
	if in.Msg != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"msg\":")
		if in.Msg == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Msg)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientToServerRPCReqSt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8b1d86ffEncodeMevericcoreMccommunication(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientToServerRPCReqSt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8b1d86ffEncodeMevericcoreMccommunication(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientToServerRPCReqSt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8b1d86ffDecodeMevericcoreMccommunication(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientToServerRPCReqSt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8b1d86ffDecodeMevericcoreMccommunication(l, v)
}
