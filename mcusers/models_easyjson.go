// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tztusers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeTztatomTztusers(in *jlexer.Lexer, out *UsersListModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UsersListModel, 0, 1)
			} else {
				*out = UsersListModel{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 UserModel
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeTztatomTztusers(out *jwriter.Writer, in UsersListModel) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UsersListModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeTztatomTztusers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersListModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeTztatomTztusers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersListModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeTztatomTztusers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersListModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeTztatomTztusers(l, v)
}
func easyjsonD2b7633eDecodeTztatomTztusers1(in *jlexer.Lexer, out *UserModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "is_admin":
			out.IsAdmin = bool(in.Bool())
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deleted_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeTztatomTztusers1(out *jwriter.Writer, in UserModel) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"email\":")
		out.String(string(in.Email))
	}
	if in.Password != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"password\":")
		out.String(string(in.Password))
	}
	if in.IsAdmin {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"is_admin\":")
		out.Bool(bool(in.IsAdmin))
	}
	if in.Phone != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"phone\":")
		if in.Phone == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Phone))
		}
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"updated_at\":")
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deleted_at\":")
		out.Raw((in.DeletedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeTztatomTztusers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeTztatomTztusers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeTztatomTztusers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeTztatomTztusers1(l, v)
}
