// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mcusers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	bson "gopkg.in/mgo.v2/bson"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson43fa8f35DecodeMevericcoreMcdashboard(in *jlexer.Lexer, out *MeModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "companyId":
			if in.IsNull() {
				in.Skip()
				out.CompanyId = nil
			} else {
				if out.CompanyId == nil {
					out.CompanyId = new(bson.ObjectId)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CompanyId).UnmarshalJSON(data))
				}
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson43fa8f35EncodeMevericcoreMcdashboard(out *jwriter.Writer, in MeModel) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Login != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"login\":")
		out.String(string(in.Login))
	}
	if in.Email != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"email\":")
		if in.Email == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Email))
		}
	}
	if in.Phone != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"phone\":")
		if in.Phone == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Phone))
		}
	}
	if in.CompanyId != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"companyId\":")
		if in.CompanyId == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CompanyId).MarshalJSON())
		}
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"updatedAt\":")
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.DeletedAt != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deletedAt\":")
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MeModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson43fa8f35EncodeMevericcoreMcdashboard(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MeModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson43fa8f35EncodeMevericcoreMcdashboard(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MeModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson43fa8f35DecodeMevericcoreMcdashboard(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MeModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson43fa8f35DecodeMevericcoreMcdashboard(l, v)
}
